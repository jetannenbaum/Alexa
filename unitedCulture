// Developed for the sole use of United Healthcare
// Developer: Brian R Shaffer
// Revision : 1.0.0
// History  : 05/05/2018

const invocationName = "our united culture";

const languageStrings = {
   'en': {
        'translation': {
            'WELCOME1' : 'Welcome to Our United Culture! Here you can learn about the culture, and values at UnitedHealth Group.',
            'HELP'    : 'If you need more information, just say help. To exit, say cancel.',
            'STOP'    : 'Goodbye!'
        }
    }
};
const APP_ID = 'amzn1.ask.skill.8dc7af4d-2fad-4c7c-9f85-cfada5807b8e';

const Alexa = require("alexa-sdk");
const https = require("https");

exports.handler = function(event, context, callback) {
    let alexa = Alexa.handler(event, context);
    alexa.appId = APP_ID; // 

    alexa.resources = languageStrings;
 // alexa.dynamoDBTableName = "myTable"; // persistent session attributes
    alexa.registerHandlers(handlers);
    alexa.execute();
}

const handlers = {
    'AMAZON.FallbackIntent': function () {
        let say = 'I am not sure how to help you. If you need more information, just say help. To exit, say cancel.';

        this.response
          .speak(say)
          .listen('try again, ' + say);


        this.emit(':responseReady'); 
    },
    'AMAZON.CancelIntent': function () {

        let say = 'Goodbye.';
        this.response
          .speak(say);

        this.emit(':responseReady'); 
    },
    'AMAZON.HelpIntent': function () {

        var CustomIntents = getCustomIntents();
        let say = 'To hear an introduction of our united culture, just say: Tell me about our culture.\
        You can also ask about specific cultural values, for example: Tell me about Innovation';
        this.response
          .speak(say)
          .listen('try again, ' + say);

        this.emit(':responseReady'); 
    },
    'AMAZON.StopIntent': function () {

        let say = 'Goodbye.';
        this.response
          .speak(say);

        this.emit(':responseReady'); 
    },
    'SummaryIntent': function () {
        
        var fs = require("fs");
        let say = fs.readFileSync("./resources/summary.txt");
        
        this.response
          .speak(say)
          .listen('If you need more information, just say help. To exit, say cancel.');


        this.emit(':responseReady'); 
    },
    'ValueIntent': function () {
        
         var say;
         var slotValue;

         console.log(this.event.request.intent.slots.valueSlot.value);
         slotValue = this.event.request.intent.slots.valueSlot.value;
         
         var fs = require("fs");
         
        if (slotValue == 'innovation'){
            say = fs.readFileSync("./resources/innovation.txt");}
            
        if (slotValue == 'integrity'){
            say = fs.readFileSync("./resources/integrity.txt");}
            
        if (slotValue == 'relationships'){
            say = fs.readFileSync("./resources/relationships.txt");}
            
        if (slotValue == 'compassion'){
            say = fs.readFileSync("./resources/compassion.txt");}
            
        if (slotValue == 'performance'){
            say = fs.readFileSync("./resources/performance.txt");}

        this.response
          .speak(say)
          .listen('If you need more information, just say help. To exit, say cancel.');

        this.emit(':responseReady'); 
    },
    'LaunchRequest': function () {
        let say = this.t('WELCOME1') + ' ' + this.t('HELP');
        this.response
          .speak(say)
          .listen('try again, ' + say);

        this.emit(':responseReady'); 
    },
    'Unhandled': function () {
        let say = 'The skill did not quite understand what you wanted.  Do you want to try something else? ';
        this.response
          .speak(say)
          .listen(say);
}};
//  ------ Helper Functions -----------------------------------------------

function randomPhrase(myArray) {
    return(myArray[Math.floor(Math.random() * myArray.length)]);
}

// returns slot resolved to an expected value if possible
function resolveCanonical(slot){
    try {
        var canonical = slot.resolutions.resolutionsPerAuthority[0].values[0].value.name;
    } catch(err){
        console.log(err.message);
        var canonical = slot.value;
    };
    return canonical;
};

// used to emit :delegate to elicit or confirm Intent Slots
function delegateSlotCollection(){
    console.log("current dialogState: " + this.event.request.dialogState);
    if (this.event.request.dialogState === "STARTED") {
        var updatedIntent = this.event.request.intent;

        this.emit(":delegate");

    } else if (this.event.request.dialogState !== "COMPLETED") {

        this.emit(":delegate");

    } else {
        console.log("returning: "+ JSON.stringify(this.event.request.intent));

        return this.event.request.intent;
    }
}

function getCustomIntents() {
    var customIntents = [];
    for (let i = 0; i < intentsReference.length; i++) {
        if(intentsReference[i].name.substring(0,7) != "AMAZON." && intentsReference[i].name !== "LaunchRequest" ) {
            customIntents.push(intentsReference[i]);
        }
    }
    return(customIntents);
}
function cardIntents(iArray) {
    var body = "";    for (var i = 0; i < iArray.length; i++) {
        body += iArray[i].name + "\n";
        body += "  '" + iArray[i].samples[0] + "'\n";
    }
    return(body);
}

const welcomeCardImg = {
    smallImageUrl: "https://m.media-amazon.com/images/G/01/mobile-apps/dex/alexa/alexa-skills-kit/alexa-devs-skill/cards/skill-builder-720x480._TTH_.png",
    largeImageUrl: "https://m.media-amazon.com/images/G/01/mobile-apps/dex/alexa/alexa-skills-kit/alexa-devs-skill/cards/skill-builder-1200x800._TTH_.png"
};

 
// *********************************** 
// ** Helper functions from 
// ** These should not need to be edited 
// ** www.github.com/alexa/alexa-cookbook 
// *********************************** 
 
// *********************************** 
// ** Route to Intent 
// *********************************** 
 
// after doing the logic in new session, 
// route to the proper intent 
 
function routeToIntent() { 
 
    switch (this.event.request.type) { 
        case 'IntentRequest': 
            this.emit(this.event.request.intent.name); 
            break; 
        case 'LaunchRequest': 
            this.emit('LaunchRequest'); 
            break; 
        default: 
            this.emit('LaunchRequest'); 
    } 
} 
 
// *********************************** 
// ** Dialog Management 
// *********************************** 
 
function getSlotValues (filledSlots) { 
    //given event.request.intent.slots, a slots values object so you have 
    //what synonym the person said - .synonym 
    //what that resolved to - .resolved 
    //and if it's a word that is in your slot values - .isValidated 
    let slotValues = {}; 
 
    console.log('The filled slots: ' + JSON.stringify(filledSlots)); 
    Object.keys(filledSlots).forEach(function(item) { 
        //console.log("item in filledSlots: "+JSON.stringify(filledSlots[item])); 
        var name = filledSlots[item].name; 
        //console.log("name: "+name); 
        if(filledSlots[item]&& 
            filledSlots[item].resolutions && 
            filledSlots[item].resolutions.resolutionsPerAuthority[0] && 
            filledSlots[item].resolutions.resolutionsPerAuthority[0].status && 
            filledSlots[item].resolutions.resolutionsPerAuthority[0].status.code ) { 
 
            switch (filledSlots[item].resolutions.resolutionsPerAuthority[0].status.code) { 
                case "ER_SUCCESS_MATCH": 
                    slotValues[name] = { 
                        "synonym": filledSlots[item].value, 
                        "resolved": filledSlots[item].resolutions.resolutionsPerAuthority[0].values[0].value.name, 
                        "isValidated": true 
                    }; 
                    break; 
                case "ER_SUCCESS_NO_MATCH": 
                    slotValues[name] = { 
                        "synonym": filledSlots[item].value, 
                        "resolved": filledSlots[item].value, 
                        "isValidated":false 
                    }; 
                    break; 
            } 
        } else { 
            slotValues[name] = { 
                "synonym": filledSlots[item].value, 
                "resolved": filledSlots[item].value, 
                "isValidated": false 
            }; 
        } 
    },this); 
    //console.log("slot values: "+JSON.stringify(slotValues)); 
    return slotValues; 
} 
// This function delegates multi-turn dialogs to Alexa. 
// For more information about dialog directives see the link below. 
// https://developer.amazon.com/docs/custom-skills/dialog-interface-reference.html 
function delegateSlotCollection() { 
    console.log("in delegateSlotCollection"); 
    console.log("current dialogState: " + this.event.request.dialogState); 
 
    if (this.event.request.dialogState === "STARTED") { 
        console.log("in STARTED"); 
        console.log(JSON.stringify(this.event)); 
        var updatedIntent=this.event.request.intent; 
        // optionally pre-fill slots: update the intent object with slot values 
        // for which you have defaults, then return Dialog.Delegate with this 
        // updated intent in the updatedIntent property 
 
        disambiguateSlot.call(this); 
        console.log("disambiguated: " + JSON.stringify(this.event)); 
        this.emit(":delegate", updatedIntent); 
    } else if (this.event.request.dialogState !== "COMPLETED") { 
        console.log("in not completed"); 
        //console.log(JSON.stringify(this.event)); 
 
        disambiguateSlot.call(this); 
        this.emit(":delegate", updatedIntent); 
    } else { 
        console.log("in completed"); 
        //console.log("returning: "+ JSON.stringify(this.event.request.intent)); 
        // Dialog is now complete and all required slots should be filled, 
        // so call your normal intent handler. 
        return this.event.request.intent.slots; 
    } 
    return null; 
} 
// If the user said a synonym that maps to more than one value, we need to ask 
// the user for clarification. Disambiguate slot will loop through all slots and 
// elicit confirmation for the first slot it sees that resolves to more than 
// one value. 
function disambiguateSlot() { 
    let currentIntent = this.event.request.intent; 
 
    Object.keys(this.event.request.intent.slots).forEach(function(slotName) { 
        let currentSlot = this.event.request.intent.slots[slotName]; 
        let slotValue = slotHasValue(this.event.request, currentSlot.name); 
        if (currentSlot.confirmationStatus !== 'CONFIRMED' && 
            currentSlot.resolutions && 
            currentSlot.resolutions.resolutionsPerAuthority[0]) { 
 
            if (currentSlot.resolutions.resolutionsPerAuthority[0].status.code == 'ER_SUCCESS_MATCH') { 
                // if there's more than one value that means we have a synonym that 
                // mapped to more than one value. So we need to ask the user for 
                // clarification. For example if the user said "mini dog", and 
                // "mini" is a synonym for both "small" and "tiny" then ask "Did you 
                // want a small or tiny dog?" to get the user to tell you 
                // specifically what type mini dog (small mini or tiny mini). 
                if ( currentSlot.resolutions.resolutionsPerAuthority[0].values.length > 1) { 
                    let prompt = 'Which would you like'; 
                    let size = currentSlot.resolutions.resolutionsPerAuthority[0].values.length; 
                    currentSlot.resolutions.resolutionsPerAuthority[0].values.forEach(function(element, index, arr) { 
                        prompt += ` ${(index == size -1) ? ' or' : ' '} ${element.value.name}`; 
                    }); 
 
                    prompt += '?'; 
                    let reprompt = prompt; 
                    // In this case we need to disambiguate the value that they 
                    // provided to us because it resolved to more than one thing so 
                    // we build up our prompts and then emit elicitSlot. 
                    this.emit(':elicitSlot', currentSlot.name, prompt, reprompt); 
                } 
            } else if (currentSlot.resolutions.resolutionsPerAuthority[0].status.code == 'ER_SUCCESS_NO_MATCH') { 
                // Here is where you'll want to add instrumentation to your code 
                // so you can capture synonyms that you haven't defined. 
                console.log("NO MATCH FOR: ", currentSlot.name, " value: ", currentSlot.value); 
 
                if (REQUIRED_SLOTS.indexOf(currentSlot.name) > -1) { 
                    let prompt = "What " + currentSlot.name + " are you looking for"; 
                    this.emit(':elicitSlot', currentSlot.name, prompt, prompt); 
                } 
            } 
        } 
    }, this); 
} 
 
// Given the request an slot name, slotHasValue returns the slot value if one 
// was given for `slotName`. Otherwise returns false. 
function slotHasValue(request, slotName) { 
 
    let slot = request.intent.slots[slotName]; 
 
    //uncomment if you want to see the request 
    //console.log("request = "+JSON.stringify(request)); 
    let slotValue; 
 
    //if we have a slot, get the text and store it into speechOutput 
    if (slot && slot.value) { 
        //we have a value in the slot 
        slotValue = slot.value.toLowerCase(); 
        return slotValue; 
    } else { 
        //we didn't get a value in the slot. 
        return false; 
    } 
} 
 // End Skill Code
// Language Model  for reference
var interactionModel = [
  {
    "name": "AMAZON.FallbackIntent",
    "samples": []
  },
  {
    "name": "AMAZON.CancelIntent",
    "samples": []
  },
  {
    "name": "AMAZON.HelpIntent",
    "samples": []
  },
  {
    "name": "AMAZON.StopIntent",
    "samples": []
  },
  {
    "name": "SummaryIntent",
    "slots": [],
    "samples": [
      "Tell me about our culture",
      "I want to learn about our culture",
      "I want to learn about our united culture",
      "Tell me about our united culture",
      "Tell me about the culture",
      "culture",
      "What is culture",
      "What is our united culture",
      "cultural values",
      "Tell me about the cultural values",
      "What are the cultural values",
      "What are united's values",
      "Tell me about united's cultural values",
      "What are our values",
      "What are our cultural values",
      "Tell me about our values",
      "Tell me about our cultural values"
    ]
  },
  {
    "name": "ValueIntent",
    "slots": [
      {
        "name": "valueSlot",
        "type": "valueType"
      }
    ],
    "samples": [
      "What is {valueSlot}",
      "I want to hear about {valueSlot}",
      "I want to learn about {valueSlot}",
      "{valueSlot}",
      "Tell me about {valueSlot}"
    ]
  },
  {
    "name": "LaunchRequest"
  }
];
var intentsReference = [
  {
    "name": "AMAZON.FallbackIntent",
    "samples": []
  },
  {
    "name": "AMAZON.CancelIntent",
    "samples": []
  },
  {
    "name": "AMAZON.HelpIntent",
    "samples": []
  },
  {
    "name": "AMAZON.StopIntent",
    "samples": []
  },
  {
    "name": "SummaryIntent",
    "slots": [],
    "samples": [
      "Tell me about our culture",
      "I want to learn about our culture",
      "I want to learn about our united culture",
      "Tell me about our united culture",
      "Tell me about the culture",
      "culture",
      "What is culture",
      "What is our united culture",
      "cultural values",
      "Tell me about the cultural values",
      "What are the cultural values",
      "What are united's values",
      "Tell me about united's cultural values",
      "What are our values",
      "What are our cultural values",
      "Tell me about our values",
      "Tell me about our cultural values"
    ]
  },
  {
    "name": "ValueIntent",
    "slots": [
      {
        "name": "valueSlot",
        "type": "valueType"
      }
    ],
    "samples": [
      "What is {valueSlot}",
      "I want to hear about {valueSlot}",
      "I want to learn about {valueSlot}",
      "{valueSlot}",
      "Tell me about {valueSlot}"
    ]
  },
  {
    "name": "LaunchRequest"
  }
];